import funkin.ui.freeplay.FreeplayState;
import funkin.ui.mainmenu.MainMenuState;
import funkin.ui.credits.CreditsState;
import funkin.ui.credits.CreditsDataHandler;
import funkin.ui.credits.CreditsDataMacro;
import flixel.FlxCamera;
import flixel.math.FlxMath;
import flixel.FlxSprite;
import funkin.modding.base.ScriptedFlxSpriteGroup;
import flixel.math.FlxAngle;
import flixel.math.FlxPoint;
import flixel.text.FlxText;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxSpriteUtil;
import flixel.util.FlxTimer;
import funkin.util.Constants;
import funkin.graphics.adobeanimate.FlxAtlasSprite;
import funkin.graphics.FunkinSprite;
import funkin.ui.freeplay.charselect.PlayableCharacter;
import funkin.ui.MusicBeatSubState;
import funkin.graphics.shaders.AdjustColorShader;
import flixel.addons.display.FlxTiledSprite;
import flixel.addons.display.FlxBackdrop;
import funkin.PlayerSettings;
import funkin.modding.module.Module;
import funkin.modding.events.ScriptEvent;
import funkin.modding.base.ScriptedMusicBeatSubState;
import funkin.modding.base.ScriptedFlxRuntimeShader;
import funkin.modding.base.ScriptedMusicBeatState;
import funkin.util.ReflectUtil;
import flixel.FlxG;
import funkin.util.WindowUtil;
import funkin.Preferences;
import funkin.audio.FunkinSound;
import haxe.macro.Context;
import funkin.Assets;
import openfl.Assets;
import openfl.utils.Assets;
import openfl.events.Event;
import openfl.events.IOErrorEvent;
import openfl.geom.Rectangle;
import openfl.net.FileReference;
import StringTools;
import haxe.format.JsonParser;

class SpookyMixCredits extends Module
{
  var removedBaseCredits:Bool = false;
  var addedNewCredits:Bool = false;
  var y:Float = 0;
  
  var scrollPaused:Bool = false;
  var canScrollUp:Bool = false;
  var pausedText:FlxText;

  var creditsGroupScriped:ScriptedFlxSpriteGroup;

  /**
   * The size of the font.
   */
  var CREDITS_FONT_SIZE:Float = 24;

  var CREDITS_HEADER_FONT_SIZE:Float = 32;

  /**
   * The speed the credits scroll at, in pixels per second.
   */
  var CREDITS_SCROLL_BASE_SPEED:Float = 100.0;

  /**
   * The speed the credits scroll at while the button is held, in pixels per second.
   */
  var CREDITS_SCROLL_FAST_SPEED:Float = CREDITS_SCROLL_BASE_SPEED * 4.0;

  public function new()
  {
    super('SpookyMixCredits');
  }

  override function onStateChangeEnd(event)
  {
    super.onStateChangeEnd(event);
    removedBaseCredits = false;
    addedNewCredits = false;
    y = 0;
  }

  function addModCredit(text:String, entryType:String, sectionEnd:Bool = false)
  {
    if (entryType == "header")
    {
        var header = FlxG.state.buildCreditsLine(text, y, true);
        header.bold = true;
        creditsGroupScriped.add(header);
        FlxG.state.creditsGroup.add(header);
        y += CREDITS_HEADER_FONT_SIZE + (header.textField.numLines * CREDITS_HEADER_FONT_SIZE);
    }
    else
    {
        var entry = FlxG.state.buildCreditsLine(text, y, false);
        creditsGroupScriped.add(entry);
        FlxG.state.creditsGroup.add(entry);
        y += CREDITS_FONT_SIZE * entry.textField.numLines;
    }
        
    if (sectionEnd == true) y += CREDITS_FONT_SIZE * 2.5;
  }

  function hasEnded():Bool
  {
    return (creditsGroupScriped.y + 720) < (-creditsGroupScriped.height);
  }

  override function onUpdate(event:UpdateScriptEvent)
  {
	super.onUpdate(event);
    
    if (ReflectUtil.getClassNameOf(FlxG.state) == "funkin.ui.credits.CreditsState")
    {
        if (removedBaseCredits == false)
        {
            for (i in 0...FlxG.state.creditsGroup.members.length)
            {
                FlxG.state.remove(FlxG.state.creditsGroup.members[i]);
                FlxG.state.creditsGroup.members[i] = null;

                if (i == FlxG.state.creditsGroup.members.length - 1)
                {
                    removedBaseCredits = true;
                }
            }
        }

        if (removedBaseCredits == true && addedNewCredits == false)
        {
            CreditsState.CREDITS_SCROLL_BASE_SPEED = 0;
            CreditsState.CREDITS_SCROLL_FAST_SPEED = 0;

            creditsGroupScriped = new ScriptedFlxSpriteGroup();
            creditsGroupScriped.x = FlxG.state.SCREEN_PAD;
            creditsGroupScriped.y = 0;

            canScrollUp = false;

            pausedText = new FlxText(-10, 10, FlxG.width, 'PAUSED');
            pausedText.setFormat(Paths.font('vcr.ttf'), 60, 0xFFFFFFFF, "right");
            pausedText.scrollFactor.set(0, 0);
            pausedText.visible = false;
			FlxG.state.add(pausedText);

            var upDownText = new FlxText(-10, 670, FlxG.width, 'UP/DOWN to Navigate');
            upDownText.setFormat(Paths.font('vcr.ttf'), 20, 0xFFFFFFFF, "right");
            upDownText.scrollFactor.set(0, 0);
            upDownText.alpha = 0.4;
            FlxG.state.add(upDownText);

            var howToPauseText = new FlxText(-10, 695, FlxG.width, 'SPACE/ENTER to Pause');
            howToPauseText.setFormat(Paths.font('vcr.ttf'), 20, 0xFFFFFFFF, "right");
            howToPauseText.scrollFactor.set(0, 0);
            howToPauseText.alpha = 0.4;
            FlxG.state.add(howToPauseText);

            addModCredit("Friday Night Funkin': Sinco Mix", "header", true);
                addModCredit("Sinco - Everything besides certain things", "body", true);

            addModCredit("---------------------------------------", "header", true);

            addModCredit("Open source rights", "header", true);
                addModCredit("Spooky Mix - Freeplay backing card code (base)", "body", true);
                addModCredit("Spooky Mix - Credits code (base)", "body", true);

            addModCredit("---------------------------------------", "header", true);

            //re-adds in base game Funkin credits
            for (entry in CreditsDataHandler.CREDITS_DATA.entries)
            {
              if (entry.header != null)
              {
                var header = FlxG.state.buildCreditsLine(entry.header, y, true);
                header.bold = true;
                creditsGroupScriped.add(header);
                FlxG.state.creditsGroup.add(header);
                y += CREDITS_HEADER_FONT_SIZE + (header.textField.numLines * CREDITS_HEADER_FONT_SIZE);
              }

              for (line in entry.body)
              {
                var entry = FlxG.state.buildCreditsLine(line.line, y, false);
                creditsGroupScriped.add(entry);
                FlxG.state.creditsGroup.add(entry);
                y += CREDITS_FONT_SIZE * entry.textField.numLines;
              }

              if (entry.appendBackers)
              {
                var backers = CreditsDataHandler.fetchBackerEntries();
                for (backer in backers)
                {
                  creditsGroupScriped.add(FlxG.state.buildCreditsLine(backer, y, false));
                  FlxG.state.creditsGroup.add(FlxG.state.buildCreditsLine(backer, y, false));
                  y += CREDITS_FONT_SIZE;
                }
              }

              // Padding between each role.
              y += CREDITS_FONT_SIZE * 2.5;
            }

            FunkinSound.playMusic('breakfast-spooky',
              {
                startingVolume: 0.8,
                overrideExisting: true,
                restartTrack: true,
                loop: true
              });

            addedNewCredits = true;
        }
        
        if (creditsGroupScriped.y <= -360)
        {
            canScrollUp = true;
        }

        if (FlxG.keys.pressed.DOWN)
        {
            // Move the whole group.
            scrollPaused = false;
            pausedText.visible = false;
            creditsGroupScriped.y -= CREDITS_SCROLL_FAST_SPEED * event.elapsed;
        }
        else if (FlxG.keys.pressed.UP && creditsGroupScriped.y <= -360 && canScrollUp == true)
        {
            scrollPaused = false;
            pausedText.visible = false;
            creditsGroupScriped.y += CREDITS_SCROLL_FAST_SPEED * event.elapsed;
        }
        else if (canScrollUp == false && scrollPaused != true)
        {
            pausedText.visible = false;
            creditsGroupScriped.y -= CREDITS_SCROLL_BASE_SPEED * event.elapsed;
        }
        else if (!FlxG.keys.pressed.UP && canScrollUp == true && scrollPaused != true)
        {
            pausedText.visible = false;
            creditsGroupScriped.y -= CREDITS_SCROLL_BASE_SPEED * event.elapsed;
        }

        if (PlayerSettings.player1.controls.BACK || hasEnded())
        {
          FlxG.state.exit();
        }
        else if (FlxG.keys.justPressed.SPACE || FlxG.keys.justPressed.ENTER)
        {
          pausedText.visible = true;
          scrollPaused = !scrollPaused;
        }
    }
  }
}
